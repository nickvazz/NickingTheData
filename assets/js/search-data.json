{
  
    
        "post0": {
            "title": "Eigen-Vectors & Eigen-Values of Stock Returns Correlations",
            "content": ". Tip: Jake Vanderplas has a great tutorial on using pandas! . #collapse-hide import pandas as pd import numpy as np import seaborn as sns import matplotlib.pyplot as plt from itertools import permutations %matplotlib inline sns.set() . . . Note: Make random Data . np.random.seed(42) def brownian_motion(mean,std,npts): return np.cumsum(np.random.normal(scale=std, size=npts)) + mean num_stocks = 10 num_timesteps = 1000 letters = &#39;ABCDEFGHIJKLMNOPQRSTUVWXYZ&#39; tickers = [&#39;&#39;.join(x) for x in np.random.choice(list(letters), size=(num_stocks,3))] dates = pd.date_range(&#39;2020-11-201&#39;, periods=num_timesteps, freq=&#39;D&#39;) data = np.vstack([brownian_motion(mean, std, num_timesteps) for mean, std in zip(np.random.randint(50,200,num_stocks), np.random.randint(2,5, num_stocks))]).T df = pd.DataFrame(data, columns=tickers, index=dates) df = df[df &gt; 0].dropna(axis=1) df.head() . GTO KHU GZS XUD HXC VUB XLF LZV . 1969-04-20 141.116771 | 97.403393 | 110.300592 | 104.750134 | 159.614557 | 106.114842 | 112.311045 | 101.060632 | . 1969-04-21 136.712380 | 101.730706 | 110.860277 | 100.405943 | 161.325646 | 109.976118 | 108.934610 | 103.011746 | . 1969-04-22 141.233292 | 98.615540 | 107.905621 | 99.246578 | 159.395447 | 109.840294 | 108.188974 | 103.533443 | . 1969-04-23 142.725768 | 100.724268 | 108.421143 | 101.966275 | 160.113603 | 106.707104 | 108.881800 | 102.359047 | . 1969-04-24 141.179876 | 104.067308 | 111.383620 | 98.116840 | 164.030552 | 109.869213 | 109.098647 | 105.953067 | . . Tip: Use this to load csv&#8217;s from your own google drive . from google.colab import drive drive.mount(&#39;/content/gdrive&#39;) !ls &quot;gdrive/My Drive&quot; # this line will look in the folder df = pd.read_csv(&#39;gdrive/My Drive/data.csv&#39;) # put the full path to the file in google drive here if you have one . fig, ax = plt.subplots(1, figsize=(20,8)) df.plot(ax=ax) plt.show() . df.diff().corr() . GTO KHU GZS XUD HXC VUB XLF LZV . GTO 1.000000 | -0.034842 | -0.008919 | 0.057757 | -0.004012 | -0.023837 | -0.017131 | -0.012034 | . KHU -0.034842 | 1.000000 | -0.004939 | 0.026932 | -0.013135 | 0.036544 | 0.027497 | -0.025655 | . GZS -0.008919 | -0.004939 | 1.000000 | 0.032693 | -0.032603 | 0.063454 | 0.020113 | 0.010456 | . XUD 0.057757 | 0.026932 | 0.032693 | 1.000000 | -0.010530 | 0.005832 | -0.030495 | 0.034310 | . HXC -0.004012 | -0.013135 | -0.032603 | -0.010530 | 1.000000 | -0.021562 | 0.007714 | -0.021141 | . VUB -0.023837 | 0.036544 | 0.063454 | 0.005832 | -0.021562 | 1.000000 | 0.004669 | 0.017130 | . XLF -0.017131 | 0.027497 | 0.020113 | -0.030495 | 0.007714 | 0.004669 | 1.000000 | -0.012195 | . LZV -0.012034 | -0.025655 | 0.010456 | 0.034310 | -0.021141 | 0.017130 | -0.012195 | 1.000000 | . e_val, e_vect = np.linalg.eig(df.diff().corr()) evect_df = pd.DataFrame(e_vect[np.argsort(e_val)[::-1]], columns=df.columns, index=df.columns) evect_df . GTO KHU GZS XUD HXC VUB XLF LZV . GTO -0.462612 | 0.286135 | -0.307235 | -0.000519 | -0.609454 | 0.470913 | 0.000300 | 0.128569 | . KHU -0.386584 | 0.551908 | 0.043692 | 0.485364 | 0.097528 | -0.506980 | -0.066881 | -0.193522 | . GZS -0.146585 | -0.366611 | -0.130274 | 0.009367 | -0.124167 | -0.071223 | -0.827676 | -0.348587 | . XUD 0.260056 | 0.568043 | -0.141505 | -0.627165 | 0.046178 | -0.006299 | -0.109068 | -0.426931 | . HXC 0.223860 | 0.091539 | -0.431629 | -0.137911 | -0.149098 | -0.488327 | -0.224082 | 0.652133 | . VUB -0.298582 | 0.233458 | 0.288640 | -0.178202 | 0.531979 | 0.319270 | -0.394092 | 0.448368 | . XLF 0.518531 | 0.270936 | 0.541743 | 0.282665 | -0.413420 | 0.133974 | -0.289216 | 0.108735 | . LZV -0.373213 | -0.141987 | 0.550999 | -0.490227 | -0.354058 | -0.397183 | 0.097036 | 0.064043 | . fig, ax = plt.subplots(1, figsize=(12,10)) ax.set_title(&#39;Eigenvalues of Correlation of Running Difference&#39;, fontsize=16) sns.heatmap(evect_df, ax=ax, annot=True, fmt=&quot;.2f&quot;, linewidths=.5) fig.savefig(&#39;../images/eigen_correlation_heatmap.png&#39;) plt.show() .",
            "url": "https://nickvazz.github.io/NickingTheData/stock/trading/eigenvalues/eigenvectors/kavoos/2020/11/21/Finding-eigenvalues-and-eigenvectors-of-stock-returns-correlation-matrix.html",
            "relUrl": "/stock/trading/eigenvalues/eigenvectors/kavoos/2020/11/21/Finding-eigenvalues-and-eigenvectors-of-stock-returns-correlation-matrix.html",
            "date": " • Nov 21, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://nickvazz.github.io/NickingTheData/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://nickvazz.github.io/NickingTheData/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://nickvazz.github.io/NickingTheData/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://nickvazz.github.io/NickingTheData/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}